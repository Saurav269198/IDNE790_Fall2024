%% ZI: Good job, just make sure to run each line after you write it to check the output - you'll
%		catch a lot of typos that way! Grade: 82%

%Assignment 2 

%1.) comparison and types of data
x = 1/(2+3^2) + (4/5)*(6/7);
y= x <= 1;
sprintf('1a: y is a %s', class(y)) %y is logical				% ZI: we're missing the computation here, but
y = y + 1									%	  the rest is correct (half points here)
y = x <= 1; % Test if x is less than or equal to 1
disp(['Data type of y: ', class(y)]) 
% Display the data type of y
% Data type of y is 'logical'
y = y + 1; % Add 1 to y
disp(['Data type of y now: ', class(y)]) 
% Display the new data type of y
% Data type of y is now 'double'


% 2.) string variable
str = "Hello World!"; % Create a string variable		% ZI: technically, char arrays and Strings are
								% different data types, but we haven't gotten there yet
								% so yes!
disp(['Data type of str: ', class(str)]) 
% Display the data type of str
% Data type of str is 'char'


% 3.) string vs. numeric variable
num = '1001'; % Create a string variable that looks like a number
disp(['Data type of num: ', class(num)]) 
% Display the data type of num
% Data type of num is 'char'. No, you cannot add 1 to it because it's a string.


% 4.) datetime operations
now = datetime('now'); % Get today's date
then = datetime('1988-09-05'); % Set a specific date
diff = now - then; % Calculate the time difference
disp(['Time difference: ', char(diff)]) 
% Display the time difference
% diff is calculated as a 'duration' data type



% 5.) finding the 10th decimal place
num = 7/57; % Calculate the division
str_num = num2str(num,16); % Convert the number to a string with enough precision
dec = str2double(str_num); % Extract the 10th decimal place 						% ZI: It's a good attempt, but you'll need to
																					%	  extract the 10th decimal place instead of
																					%	  just converting the whole string back into
																					%	  a number  (half points here)
% (12th character in the string)
disp(['The 10th decimal place of 7/57 is: ', num2str(dec)])
% dec is assigned the value of the 10th decimal place


%5.) ANSWER:
format long
7/57
format short
dec = 5;


% 6.) swapping variable values
x1 = 30; % Assign a value to x1
x2 = 80; % Assign a value to x2
temporary = x1; % Use a temporary variable to hold the value of x1
x1 = x2; % Assign the value of x2 to x1
x2 = temporary; % Assign the original value of x1 (stored in temp) to x2
disp(['x1: ', num2str(x1), ', x2: ', num2str(x2)])
% x1 and x2 are now swapped



% 7.) ~Manually~ making an array
arr1 = [2.5:0.5:4]; % Create arr1							% ZI: By "manually", I was thinking of hard-coding 
											%     the numbers, like arr1 = [2.5, 3, 3.5, 4],
											%     but I didn't specify that, so yes!
disp('arr1:')
disp(arr1)
% arr1 is created with the specified values



% 8.) Using the colon operator and array indexing
arr2 = 7:3:28; % Create arr2 using colon operator
z = arr2 + arr2 + arr2; % Calculate the sum of specific elements		% ZI: almost, but you actually have to extract a specific
																		% 	  element of the array by indexing, rather than
																		%     just adding the whole array together  (half points here)
disp('arr2:')
disp(arr2)
disp(['Sum of 3rd, 5th, and 7th elements of arr2: ', num2str(z)])
% z contains the sum of the specified elements of arr2



% 9.) reverse the array and make a subset
arr2_backwards = flip(arr2); % Reverse arr2								% ZI: you can also do arr2(end:-1:1)
arr_subset = arr2_backwards(1:2:end); % Extract every other element
disp('arr2_backwards:')
disp(arr2_backwards)
disp('arr_subset:')
disp(arr_subset)
% arr2_backwards is the reversed arr2, and arr_subset contains every other element


% 10.) Array3 concatenation of previous arrays
arr3 = [arr2, arr_subset]; % Concatenate arr2 and arr_subset
disp('arr3:')
disp(arr3)
% arr3 is the concatenation of arr2 and arr_subset



% 11.) Create array4 from transposed arr3
arr4 = 'arr3'; % Transpose arr3 to create a column vector			% ZI: I'm not sure if this was a typo or a ChatGPT output,
										%	  but just use one single quote to transpose - otherwise,
										%	  it creates a string/character array  (half points here)
disp('arr4:')
disp(arr4)
% arr4 is now a column vector with the same elements as arr3
