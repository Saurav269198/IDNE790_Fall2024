%% ZI: Great job! We'll go over how to create a script this week, so you don't have to 
%      do everything in the command line next time.  Grade: 100%


%1

>> x= [1/(2+3^2)]+[(4/5)*(6/7)]		% ZI: great use of parentheses to make the operations clearer. You
									%	  don't need the brackets unless you're making arrays, but they
									%	  don't hurt anything

x =

    0.7766

>> x<=1

ans =

  logical

   1

>> y=(x<=1)

y =

  logical

   1

>> class(y)

ans =

    'logical'

>> y=1+y

y =

     2

>> class(y)

ans =

    'double'

>> %2
>> str="Hello World!"

str = 

    "Hello World!"

>> class(str)

ans =

    'string'

>> %3
>> num = "1001"

num = 

    "1001"

>> class(num)

ans =

    'string'

>> num = num + 1

num = 

    "10011"

>> %4
>> now = datetime			% ZI: You can do datetime('today') to just get
                            %     the date without the time, but this
                            %     works too!

now = 

  datetime

   08-Sep-2024 20:59:51

 
>> then = datetime(1988, 09, 05)

then = 

  datetime

   05-Sep-1988

>> diff= now-then

diff = 

  duration

   315668:59:51

 
>> diff= duration(now - then)

diff = 

  duration

   315668:59:51

>> now=datetime(2024, 09, 08)

now = 

  datetime

   08-Sep-2024

>> diff= duration(now - then)		% ZI: subtracting the two datetime variables automatically
									%	  creates a duration variable, so you don't need to use
									%     the "duration()" function

diff = 

  duration

   315648:00:00



>> %5
>> b=7/57

b =

    0.1228

>> format long
>> b

b =

   0.122807017543860

>> c=num2str(b,10)

c =

    '0.1228070175'

>> dec=c(end)					% ZI: this is a great programmatic way
                                %     to do it! I was thinking of just changing
                                %     the format to long and manually looking
                                %     at the 10th place, but this works! You don't need
								%     to change the format to long in this case, the function
								%     will work regardless

dec =

    '5'


>> %6
>> x1 = [1 6 9]

x1 =

     1     6     9

>> x2 = [2 5 8]

x2 =

     2     5     8

>> x1(2)=8

x1 =

     1     8     9

>> x2(3)=1					% ZI: The question might not have been super clear here. I
							%     had meant for x1 and x2 to be single numbers (not arrays)
							%     and for you to swap the values. For example, if x1 = 1 and
							%     x2 = 2, then after the swap, x1 = 2 and x2 = 1. Your code does
							%     switch some element of both arrays though, so I could see 
							%     the intent.

x2 =

     2     5     1

>> z1 = [x1;x2]				% ZI: Again, I think the question wasn't clear. You shouldn't need
							%     to concatenate anything for this one, but it's good practice!

z1 =

     1     8     9
     2     5     1

>> %7

 
>> arr1 = [2.5 3.0 3.5 4.0]

arr1 =

    2.5000    3.0000    3.5000    4.0000

>> %8
>> arr2 = 7:3:28

arr2 =

     7    10    13    16    19    22    25    28

>> z= arr2(3)+arr2(5)+arr2(7)

z =

    57

>> %9

>> arr2_backwards = 28:-3:7					% ZI: You can also do arr2(end:-1:1)

arr2_backwards =

    28    25    22    19    16    13    10     7

>> arr_subset = arr2_backwards(1:2:end)

arr_subset =

    28    22    16    10

>> %10
>> arr3 = [arr2, arr_subset]

arr3 =

  Columns 1 through 11

     7    10    13    16    19    22    25    28    28    22    16

  Column 12

    10



>> %11
>> arr4 = arr3'

arr4 =

     7
    10
    13
    16
    19
    22
    25
    28
    28
    22
    16
    10

